// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
//const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	//get client opcounter
	ClientStats(ctx context.Context, in *ClientStatsPara, opts ...grpc.CallOption) (Agent_ClientStatsClient, error)
	//get sla info
	GetSlaInfo(ctx context.Context, in *GetSlaInfoPara, opts ...grpc.CallOption) (Agent_GetSlaInfoClient, error)
	//get mds overview
	MdsOverview(ctx context.Context, in *MdsOverviewPara, opts ...grpc.CallOption) (*MdsOverviewRet, error)
	//get oss overview
	OssOverview(ctx context.Context, in *OssOverviewPara, opts ...grpc.CallOption) (*OssOverviewRet, error)
	//get node list
	NodeList(ctx context.Context, in *NodeListPara, opts ...grpc.CallOption) (Agent_NodeListClient, error)
	//get performance info
	Performance(ctx context.Context, in *PerformancePara, opts ...grpc.CallOption) (Agent_PerformanceClient, error)
	// manage project quota
	ManageProjectQuotaInfo(ctx context.Context, in *ManageProjectQuotaInfoPara, opts ...grpc.CallOption) (Agent_ManageProjectQuotaInfoClient, error)
	// manage qos
	ManageQosInfo(ctx context.Context, in *ManageQosInfoPara, opts ...grpc.CallOption) (Agent_ManageQosInfoClient, error)
	// manage acl
	ManageAclInfo(ctx context.Context, in *ManageAclInfoPara, opts ...grpc.CallOption) (Agent_ManageAclInfoClient, error)
	// manage getentry
	ManageGetentryInfo(ctx context.Context, in *ManageGetentryInfoPara, opts ...grpc.CallOption) (Agent_ManageGetentryInfoClient, error)
	// manage listdir
	ManageListdirInfo(ctx context.Context, in *ManageListdirInfoPara, opts ...grpc.CallOption) (Agent_ManageListdirInfoClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) ClientStats(ctx context.Context, in *ClientStatsPara, opts ...grpc.CallOption) (Agent_ClientStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/Agent/ClientStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentClientStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ClientStatsClient interface {
	Recv() (*ClientStatsRet, error)
	grpc.ClientStream
}

type agentClientStatsClient struct {
	grpc.ClientStream
}

func (x *agentClientStatsClient) Recv() (*ClientStatsRet, error) {
	m := new(ClientStatsRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetSlaInfo(ctx context.Context, in *GetSlaInfoPara, opts ...grpc.CallOption) (Agent_GetSlaInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/Agent/GetSlaInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetSlaInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetSlaInfoClient interface {
	Recv() (*GetSlaInfoRet, error)
	grpc.ClientStream
}

type agentGetSlaInfoClient struct {
	grpc.ClientStream
}

func (x *agentGetSlaInfoClient) Recv() (*GetSlaInfoRet, error) {
	m := new(GetSlaInfoRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) MdsOverview(ctx context.Context, in *MdsOverviewPara, opts ...grpc.CallOption) (*MdsOverviewRet, error) {
	out := new(MdsOverviewRet)
	err := c.cc.Invoke(ctx, "/Agent/MdsOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) OssOverview(ctx context.Context, in *OssOverviewPara, opts ...grpc.CallOption) (*OssOverviewRet, error) {
	out := new(OssOverviewRet)
	err := c.cc.Invoke(ctx, "/Agent/OssOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) NodeList(ctx context.Context, in *NodeListPara, opts ...grpc.CallOption) (Agent_NodeListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[2], "/Agent/NodeList", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentNodeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_NodeListClient interface {
	Recv() (*NodeListRet, error)
	grpc.ClientStream
}

type agentNodeListClient struct {
	grpc.ClientStream
}

func (x *agentNodeListClient) Recv() (*NodeListRet, error) {
	m := new(NodeListRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Performance(ctx context.Context, in *PerformancePara, opts ...grpc.CallOption) (Agent_PerformanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[3], "/Agent/Performance", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentPerformanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_PerformanceClient interface {
	Recv() (*PerformanceRet, error)
	grpc.ClientStream
}

type agentPerformanceClient struct {
	grpc.ClientStream
}

func (x *agentPerformanceClient) Recv() (*PerformanceRet, error) {
	m := new(PerformanceRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ManageProjectQuotaInfo(ctx context.Context, in *ManageProjectQuotaInfoPara, opts ...grpc.CallOption) (Agent_ManageProjectQuotaInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[4], "/Agent/ManageProjectQuotaInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManageProjectQuotaInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ManageProjectQuotaInfoClient interface {
	Recv() (*ManageProjectQuotaInfoRet, error)
	grpc.ClientStream
}

type agentManageProjectQuotaInfoClient struct {
	grpc.ClientStream
}

func (x *agentManageProjectQuotaInfoClient) Recv() (*ManageProjectQuotaInfoRet, error) {
	m := new(ManageProjectQuotaInfoRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ManageQosInfo(ctx context.Context, in *ManageQosInfoPara, opts ...grpc.CallOption) (Agent_ManageQosInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[5], "/Agent/ManageQosInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManageQosInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ManageQosInfoClient interface {
	Recv() (*ManageQosInfoRet, error)
	grpc.ClientStream
}

type agentManageQosInfoClient struct {
	grpc.ClientStream
}

func (x *agentManageQosInfoClient) Recv() (*ManageQosInfoRet, error) {
	m := new(ManageQosInfoRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ManageAclInfo(ctx context.Context, in *ManageAclInfoPara, opts ...grpc.CallOption) (Agent_ManageAclInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[6], "/Agent/ManageAclInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManageAclInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ManageAclInfoClient interface {
	Recv() (*ManageAclInfoRet, error)
	grpc.ClientStream
}

type agentManageAclInfoClient struct {
	grpc.ClientStream
}

func (x *agentManageAclInfoClient) Recv() (*ManageAclInfoRet, error) {
	m := new(ManageAclInfoRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ManageGetentryInfo(ctx context.Context, in *ManageGetentryInfoPara, opts ...grpc.CallOption) (Agent_ManageGetentryInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[7], "/Agent/ManageGetentryInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManageGetentryInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ManageGetentryInfoClient interface {
	Recv() (*ManageGetentryInfoRet, error)
	grpc.ClientStream
}

type agentManageGetentryInfoClient struct {
	grpc.ClientStream
}

func (x *agentManageGetentryInfoClient) Recv() (*ManageGetentryInfoRet, error) {
	m := new(ManageGetentryInfoRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ManageListdirInfo(ctx context.Context, in *ManageListdirInfoPara, opts ...grpc.CallOption) (Agent_ManageListdirInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[8], "/Agent/ManageListdirInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManageListdirInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ManageListdirInfoClient interface {
	Recv() (*ManageListdirInfoRet, error)
	grpc.ClientStream
}

type agentManageListdirInfoClient struct {
	grpc.ClientStream
}

func (x *agentManageListdirInfoClient) Recv() (*ManageListdirInfoRet, error) {
	m := new(ManageListdirInfoRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	//get client opcounter
	ClientStats(*ClientStatsPara, Agent_ClientStatsServer) error
	//get sla info
	GetSlaInfo(*GetSlaInfoPara, Agent_GetSlaInfoServer) error
	//get mds overview
	MdsOverview(context.Context, *MdsOverviewPara) (*MdsOverviewRet, error)
	//get oss overview
	OssOverview(context.Context, *OssOverviewPara) (*OssOverviewRet, error)
	//get node list
	NodeList(*NodeListPara, Agent_NodeListServer) error
	//get performance info
	Performance(*PerformancePara, Agent_PerformanceServer) error
	// manage project quota
	ManageProjectQuotaInfo(*ManageProjectQuotaInfoPara, Agent_ManageProjectQuotaInfoServer) error
	// manage qos
	ManageQosInfo(*ManageQosInfoPara, Agent_ManageQosInfoServer) error
	// manage acl
	ManageAclInfo(*ManageAclInfoPara, Agent_ManageAclInfoServer) error
	// manage getentry
	ManageGetentryInfo(*ManageGetentryInfoPara, Agent_ManageGetentryInfoServer) error
	// manage listdir
	ManageListdirInfo(*ManageListdirInfoPara, Agent_ManageListdirInfoServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) ClientStats(*ClientStatsPara, Agent_ClientStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStats not implemented")
}
func (UnimplementedAgentServer) GetSlaInfo(*GetSlaInfoPara, Agent_GetSlaInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSlaInfo not implemented")
}
func (UnimplementedAgentServer) MdsOverview(context.Context, *MdsOverviewPara) (*MdsOverviewRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MdsOverview not implemented")
}
func (UnimplementedAgentServer) OssOverview(context.Context, *OssOverviewPara) (*OssOverviewRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssOverview not implemented")
}
func (UnimplementedAgentServer) NodeList(*NodeListPara, Agent_NodeListServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeList not implemented")
}
func (UnimplementedAgentServer) Performance(*PerformancePara, Agent_PerformanceServer) error {
	return status.Errorf(codes.Unimplemented, "method Performance not implemented")
}
func (UnimplementedAgentServer) ManageProjectQuotaInfo(*ManageProjectQuotaInfoPara, Agent_ManageProjectQuotaInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageProjectQuotaInfo not implemented")
}
func (UnimplementedAgentServer) ManageQosInfo(*ManageQosInfoPara, Agent_ManageQosInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageQosInfo not implemented")
}
func (UnimplementedAgentServer) ManageAclInfo(*ManageAclInfoPara, Agent_ManageAclInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageAclInfo not implemented")
}
func (UnimplementedAgentServer) ManageGetentryInfo(*ManageGetentryInfoPara, Agent_ManageGetentryInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageGetentryInfo not implemented")
}
func (UnimplementedAgentServer) ManageListdirInfo(*ManageListdirInfoPara, Agent_ManageListdirInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageListdirInfo not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

//func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
//	s.RegisterService(&Agent_ServiceDesc, srv)
//}

func _Agent_ClientStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientStatsPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ClientStats(m, &agentClientStatsServer{stream})
}

type Agent_ClientStatsServer interface {
	Send(*ClientStatsRet) error
	grpc.ServerStream
}

type agentClientStatsServer struct {
	grpc.ServerStream
}

func (x *agentClientStatsServer) Send(m *ClientStatsRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetSlaInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSlaInfoPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetSlaInfo(m, &agentGetSlaInfoServer{stream})
}

type Agent_GetSlaInfoServer interface {
	Send(*GetSlaInfoRet) error
	grpc.ServerStream
}

type agentGetSlaInfoServer struct {
	grpc.ServerStream
}

func (x *agentGetSlaInfoServer) Send(m *GetSlaInfoRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_MdsOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MdsOverviewPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).MdsOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/MdsOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).MdsOverview(ctx, req.(*MdsOverviewPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_OssOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssOverviewPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).OssOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/OssOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).OssOverview(ctx, req.(*OssOverviewPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_NodeList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeListPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).NodeList(m, &agentNodeListServer{stream})
}

type Agent_NodeListServer interface {
	Send(*NodeListRet) error
	grpc.ServerStream
}

type agentNodeListServer struct {
	grpc.ServerStream
}

func (x *agentNodeListServer) Send(m *NodeListRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_Performance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PerformancePara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).Performance(m, &agentPerformanceServer{stream})
}

type Agent_PerformanceServer interface {
	Send(*PerformanceRet) error
	grpc.ServerStream
}

type agentPerformanceServer struct {
	grpc.ServerStream
}

func (x *agentPerformanceServer) Send(m *PerformanceRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ManageProjectQuotaInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManageProjectQuotaInfoPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ManageProjectQuotaInfo(m, &agentManageProjectQuotaInfoServer{stream})
}

type Agent_ManageProjectQuotaInfoServer interface {
	Send(*ManageProjectQuotaInfoRet) error
	grpc.ServerStream
}

type agentManageProjectQuotaInfoServer struct {
	grpc.ServerStream
}

func (x *agentManageProjectQuotaInfoServer) Send(m *ManageProjectQuotaInfoRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ManageQosInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManageQosInfoPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ManageQosInfo(m, &agentManageQosInfoServer{stream})
}

type Agent_ManageQosInfoServer interface {
	Send(*ManageQosInfoRet) error
	grpc.ServerStream
}

type agentManageQosInfoServer struct {
	grpc.ServerStream
}

func (x *agentManageQosInfoServer) Send(m *ManageQosInfoRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ManageAclInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManageAclInfoPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ManageAclInfo(m, &agentManageAclInfoServer{stream})
}

type Agent_ManageAclInfoServer interface {
	Send(*ManageAclInfoRet) error
	grpc.ServerStream
}

type agentManageAclInfoServer struct {
	grpc.ServerStream
}

func (x *agentManageAclInfoServer) Send(m *ManageAclInfoRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ManageGetentryInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManageGetentryInfoPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ManageGetentryInfo(m, &agentManageGetentryInfoServer{stream})
}

type Agent_ManageGetentryInfoServer interface {
	Send(*ManageGetentryInfoRet) error
	grpc.ServerStream
}

type agentManageGetentryInfoServer struct {
	grpc.ServerStream
}

func (x *agentManageGetentryInfoServer) Send(m *ManageGetentryInfoRet) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ManageListdirInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManageListdirInfoPara)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ManageListdirInfo(m, &agentManageListdirInfoServer{stream})
}

type Agent_ManageListdirInfoServer interface {
	Send(*ManageListdirInfoRet) error
	grpc.ServerStream
}

type agentManageListdirInfoServer struct {
	grpc.ServerStream
}

func (x *agentManageListdirInfoServer) Send(m *ManageListdirInfoRet) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MdsOverview",
			Handler:    _Agent_MdsOverview_Handler,
		},
		{
			MethodName: "OssOverview",
			Handler:    _Agent_OssOverview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStats",
			Handler:       _Agent_ClientStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSlaInfo",
			Handler:       _Agent_GetSlaInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NodeList",
			Handler:       _Agent_NodeList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Performance",
			Handler:       _Agent_Performance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManageProjectQuotaInfo",
			Handler:       _Agent_ManageProjectQuotaInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManageQosInfo",
			Handler:       _Agent_ManageQosInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManageAclInfo",
			Handler:       _Agent_ManageAclInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManageGetentryInfo",
			Handler:       _Agent_ManageGetentryInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManageListdirInfo",
			Handler:       _Agent_ManageListdirInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/agent.proto",
}
