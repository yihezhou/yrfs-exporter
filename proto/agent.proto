syntax = "proto3";

option go_package="./;yrfs-exporter";


//grpc client: get client stats
message ClientStatsPara {
  //node_type = 1, request opcounter for mds
  //node_type = 2, request opcounter for oss
  uint32 node_type = 1;

  //true: hide server ip
  bool hide_internal_ips = 2;

  //true: return all client even if opcounter is zero
  bool return_zero_stats = 3;

  //client_stats_type = 0, sum of external clients
  //client_stats_type = 1, sum of internal and external clients
  //client_stats_type = 2, sum of internal clients
  uint32 client_stats_type = 4;
}

/*
mds opcounter:
  uint64 sum;
  uint64 ack;
  uint64 close;
  uint64 ent_inf;
  uint64 node_inf;
  uint64 fnd_own;
  uint64 lnk;
  uint64 mkdir;
  uint64 create;
  uint64 rddir;
  uint64 refr_ent;
  uint64 mds_inf;
  uint64 rmdir;
  uint64 rmlnk;
  uint64 mv_dir_ins;
  uint64 mv_file_ins;
  uint64 open;
  uint64 ren;
  uint64 s_ch_drct;
  uint64 s_attr;
  uint64 s_dir_pat;
  uint64 stat;
  uint64 statfs;
  uint64 trunc;
  uint64 symlnk;
  uint64 unlnk;
  uint64 look_li;
  uint64 stat_li;
  uint64 reval_li;
  uint64 open_li;
  uint64 create_li;
  uint64 mirror_md;
  uint64 hardlnk;
  uint64 flck_ap;
  uint64 flck_en;
  uint64 flck_rg;
  uint64 dirparent;
  uint64 list_xa;
  uint64 get_xa;
  uint64 rm_xa;
  uint64 set_xa

oss opcounter:
  uint64 sum;
  uint64 ack;
  uint64 s_ch_drct;
  uint64 get_file_size;
  uint64 s_attr;
  uint64 statfs;
  uint64 trunc;
  uint64 close;
  uint64 fsync;
  uint64 open;
  uint64 iops_rd;
  uint64 bps_rd;
  uint64 iops_wr;
  uint64 bps_wr;
  uint64 gendbg;
  uint64 hrtbeat;
  uint64 rem_node;
  uint64 node_inf;
  uint64 stor_info;
  uint64 unlnk;
*/

//grpc server: return client stats
message ClientStatsRet {
  //attention:
  //the first message is total size, the ip is fix string "total", the online is true
  //the client message start with the second message

  //client ip
  string ip = 1;

  //true: client ip is online
  bool online = 2;

  //mds or oss opcounter
  repeated uint64 opcounters = 3;
}

//grpc client: get sla info
message GetSlaInfoPara {
  //true: contains sla info of root
  bool with_root = 1;
}

/*
sla_value:
  uint64 total_rb;
  uint64 total_wb;
  uint64 total_rs;
  uint64 total_ws;
  uint64 rbps;
  uint64 wbps;
  uint64 riops;
  uint64 wiops;
*/
//grpc server: return sla info
message GetSlaInfoRet {
  //the path
  string path = 1;

  //entryID of path
  string entry_id = 2;

  //sla value
  repeated uint64 sla_value = 3;
}

//value with timestamp key
//this message is used for MdsOverviewRet/OssOverviewRet
message TimeValue {
  uint64 time = 1;
  uint64 value = 2;
}

//server node information
message ServerNode {
  //node name
  string node_name = 1;

  //node num id
  uint32 node_num_id = 2;

  //node is noline
  //true: server node is online
  bool online = 3;
}

//grpc client: get mds overview
message MdsOverviewPara {
  bool unused = 1;
}

//grpc server: return mds overview
message MdsOverviewRet {
  uint64 disk_space_total = 1;
  uint64 disk_space_free = 2;
  uint64 disk_space_used = 3;
  uint64 inode_space_used = 4;
  repeated ServerNode node_info = 5;
  repeated TimeValue work_requests = 6;
  repeated TimeValue queued_requests = 7;
}

//grpc client: get oss overview
message OssOverviewPara {
  bool unused = 1;
}

//grpc server: return oss overview
message OssOverviewRet {
  uint64 disk_space_total = 1;
  uint64 disk_space_free = 2;
  uint64 disk_space_used = 3;
  uint64 disk_read_sum = 4;
  uint64 disk_write_sum = 5;
  repeated ServerNode node_info = 6;
  repeated TimeValue disk_perf_read = 7;
  repeated TimeValue disk_perf_average_read = 8;
  repeated TimeValue disk_perf_write = 9;
  repeated TimeValue disk_per_average_write = 10;
}

//grpc client: get node list
message NodeListPara {
  //true: return client node information
  bool client = 1;

  //This value is meaningful only if client is set to true
  //true: hide server ip
  bool hide_internal_ips = 2;

  //true: return agent information
  bool agent = 3;
}

//node information
message NodeInfo {
  //type = 1: mds
  //type = 2: oss
  //type = 3: client
  //type = 4: mgr
  //type = 5: agent
  uint32 type = 1;

  //node num id
  uint32 node_num_id = 2;

  //node num name
  string node_name = 3;
}

//grpc server: return node list
message NodeListRet {
  //the list of node info
  repeated NodeInfo node_lists = 1;
}

//grpc client: get performance
message PerformancePara {
    //specify which dir you want to get performance
    //if no path is specified, all performance are returned
    string path = 1;
}

/*
opcounter:
    uint64 read_bps
    uint64 write_bps
    uint64 total_bps
    uint64 read_iops
    uint64 write_iops
    uint64 total_iops
    uint64 mops
 */
message PerformanceRet {
    string path = 1;
    string eid = 2;
    repeated uint64 opcounter = 3;
}

//projectquota parameter
message ManageProjectQuotaInfoPara {
  // projectquota operation
  // op = 1: add projectquota
  // op = 2: list projectquota
  // op = 3: delete projectquota
  // op = 4: update projectquota
  uint32 op = 1;

  // spacelimit
  uint64 spacelimit = 2;

  // inodelimit
  uint64 inodelimit = 3;

  // path
  string path = 4;

  // raw
  bool raw = 5;

  // point: recursive and force cannot be set to true at the same time
  // When delete projectquota, specify whether to delete projectquota of the directory
  // and its recursive subdirectories
  bool recursive = 6;
  // When delete projectquota, specify whether to force to delete projectquota of the directory
  bool force = 7;

  // When list projectquota, which means that all projectquota information with the same prefix
  bool prefix = 8;

  // the entryid when delete the projectquota
  string entryid = 9;

  // verbose
  bool verbose = 10;

  // update
  bool update = 11;
}

message ProjectQuotaInfo {
  // entry id
  string eid = 1;

  // project id
  uint64 projectquotaid = 2;

  // spaceused
  uint64 spaceused = 3;

  // spacelimit
  uint64 spacelimit = 4;

  // inodeused
  uint64 inodeused = 5;

  // inodelimit
  uint64 inodelimit = 6;

  // dirused
  uint64 dirused = 7;

  // fileused
  uint64 fileused = 8;

  // path
  string path = 9;
}

message ManageProjectQuotaInfoRet {
  repeated ProjectQuotaInfo project_quota_info_list = 1;
}

// qos parameter
message ManageQosInfoPara {
  // qos operation
  // op = 1: add qos
  // op = 2: list qos
  // op = 3: delete qos
  uint32 op = 1;

  // point: rbps and wbps can't be set when tbps is specified, same with tiops
  //read bps
  uint64 rbps = 2;
  //write bps
  uint64 wbps = 3;
  //read iops
  uint64 riops = 4;
  //write iops
  uint64 wiops = 5;

  //total bps
  uint64 tbps = 6;
  //total iops
  uint64 tiops = 7;
  //mds ops
  uint64 mops = 8;

  //qos path
  string path = 9;

  // point: recursive and force cannot be set to true at the same time
  // When delete qos, specify whether to delete qos of the directory
  // and its recursive subdirectories
  bool recursive = 10;
  // When delete qos, specify whether to force to delete qos of a directory
  bool force = 11;

  // When list qos, which means that all qos information with the same prefix
  bool prefix = 12;
}

message QosInfo {
  // entry id
  string eid = 1;

  //read bps
  uint64 rbps = 2;
  //write bps
  uint64 wbps = 3;
  //read iops
  uint64 riops = 4;
  //write iops
  uint64 wiops = 5;

  //total bps
  uint64 tbps = 6;
  //total iops
  uint64 tiops = 7;
  //mds ops
  uint64 mops = 8;

  //qos path
  string path = 9;
}

message ManageQosInfoRet {
  repeated QosInfo qos_info_list = 1;
}

message ManageAclInfoPara {
  // acl operation
  // op = 1: add acl
  // op = 2: list acl
  // op = 3: delete acl
  uint32 op = 1;

  string path = 2;

  // * means all ip
  string ip = 3;

  string id = 4;

  // mode type
  // mode = 1: RW
  // mode = 2: RO
  string mode = 5;
}

message AclInfo {
  string path = 1;

  string response = 2;
}

message ManageAclInfoRet {
  repeated AclInfo acl_info_list = 1;
}

message ManageGetentryInfoPara {
  string path = 1;
  bool verbose = 2;
  bool use_mounted_path = 3;
}

message ManageGetentryInfoRet {
  string entry_info_eid = 1;
  string entry_info_peid = 2;

  bool entry_info_ismirrored = 3;
  uint32 entry_info_owner_node_id = 4;
  string owner_node_type_node_name = 5;

  uint32 mirror_node_id = 6;
  string meta_nodes_type_node_name = 7;

  bool is_file = 8;
  string layer = 9;

  uint64 tiering_id = 10;
  uint32 pattern_type= 11;
  string pattern_entry_type_str = 12;
  string pattern_chunk_size = 13;

  bool stripe_osd_ids_empty = 14;
  uint64 stripe_osd_ids_size = 15;
  uint64 pattern_default_num_osds = 16;

  bool entry_type_is_dir = 17;
  bool pool = 18;
  uint32 pool_get_id = 19;
  string pool_description = 20;

  repeated uint32 osd_ids = 21;

  string dentry_path = 22;
  string chunk_path = 23;

  bool print_inode_hash_path = 24;
  string hash_path = 25;
}

message ManageListdirInfoPara {
  string path = 1;
  bool use_mounted_path = 2;
}

message ListdirInfo {
  string entry_types = 1;
  string entry_names = 2;
}

message ManageListdirInfoRet {
  repeated ListdirInfo listdir_info_list = 1;
}

service Agent {
  //get client opcounter
  rpc ClientStats(ClientStatsPara) returns (stream ClientStatsRet) {}

  //get sla info
  rpc GetSlaInfo(GetSlaInfoPara) returns (stream GetSlaInfoRet) {}

  //get mds overview
  rpc MdsOverview(MdsOverviewPara) returns (MdsOverviewRet) {}

  //get oss overview
  rpc OssOverview(OssOverviewPara) returns (OssOverviewRet) {}

  //get node list
  rpc NodeList(NodeListPara) returns (stream NodeListRet) {}

  //get performance info
  rpc Performance(PerformancePara) returns (stream PerformanceRet) {}

  // manage project quota
  rpc ManageProjectQuotaInfo(ManageProjectQuotaInfoPara) returns (stream ManageProjectQuotaInfoRet) {}

  // manage qos
  rpc ManageQosInfo(ManageQosInfoPara) returns (stream ManageQosInfoRet) {}

  // manage acl
  rpc ManageAclInfo(ManageAclInfoPara) returns (stream ManageAclInfoRet) {}

  // manage getentry
  rpc ManageGetentryInfo(ManageGetentryInfoPara) returns (stream ManageGetentryInfoRet) {}

  // manage listdir
  rpc ManageListdirInfo(ManageListdirInfoPara) returns (stream ManageListdirInfoRet) {}
}


